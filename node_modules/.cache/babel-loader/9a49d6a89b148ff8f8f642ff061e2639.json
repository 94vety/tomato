{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nimport { message } from \"antd\";\nimport { login, register, getTomatos, addReport, getGoodList, buyGood } from \"../services/index.js\";\n\nclass Mobx {\n  constructor() {\n    this.tomato = 0;\n    this.tomatoList = [];\n    this.goodList = [];\n\n    this.modifyNumber = async id => {\n      console.log(id);\n      this.goodList.map(item => {\n        if (item.id === id) {\n          return { ...item,\n            number: item.number - 1\n          };\n        } else {\n          return item;\n        }\n      });\n    };\n\n    this.loginRequest = async data => {\n      const {\n        data: {\n          code,\n          errors,\n          data: {\n            token,\n            tomato,\n            vip,\n            admin,\n            email\n          }\n        }\n      } = await login(data);\n\n      if (code) {\n        this.tomato = tomato;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"vip\", vip);\n        localStorage.setItem(\"admin\", admin);\n        localStorage.setItem(\"username\", data.username);\n        localStorage.setItem(\"email\", email);\n        message.success(\"登录成功\");\n        return true;\n      } else {\n        message.error(errors);\n        return false;\n      }\n    };\n\n    this.registerRequest = async data => {\n      const {\n        data: {\n          code,\n          errors,\n          data: {\n            token,\n            tomato,\n            vip,\n            admin,\n            email\n          }\n        }\n      } = await register(data);\n\n      if (code) {\n        this.tomato = tomato;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"vip\", vip);\n        localStorage.setItem(\"admin\", admin);\n        localStorage.setItem(\"username\", data.username);\n        localStorage.setItem(\"email\", email);\n        message.success(\"注册成功自动登录\");\n        return true;\n      } else {\n        message.error(errors);\n        return false;\n      }\n    };\n\n    this.getTomatosRequest = async () => {\n      const {\n        data: {\n          code,\n          errors,\n          data\n        }\n      } = await getTomatos();\n      const {\n        user_report\n      } = data[0];\n\n      if (code) {\n        this.tomatoList = user_report;\n      } else {\n        message.error(errors);\n      }\n    };\n\n    this.addReportRequest = async data => {\n      const {\n        data: {\n          code,\n          errors\n        }\n      } = await addReport(data);\n\n      if (code) {\n        message.success(\"任务记录已上传\");\n      } else {\n        message.error(errors);\n      }\n    };\n\n    this.getGoodListRequest = async () => {\n      const {\n        data: {\n          code,\n          errors,\n          data\n        }\n      } = await getGoodList();\n\n      if (code) {\n        this.goodList = data;\n        console.log(this.goodList.length, data);\n      } else {\n        message.error(errors);\n      }\n    };\n\n    this.buyGoodRequest = async data => {\n      const {\n        data: {\n          code,\n          errors\n        }\n      } = await buyGood(data);\n\n      if (code) {\n        message.success(\"购买成功\");\n      } else {\n        message.error(errors);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n}\n\nconst myStore = new Mobx();\nexport default myStore;","map":{"version":3,"sources":["/Users/wuliangrui/Desktop/库里泡/item/tomato/src/store/index.js"],"names":["makeAutoObservable","message","login","register","getTomatos","addReport","getGoodList","buyGood","Mobx","constructor","tomato","tomatoList","goodList","modifyNumber","id","console","log","map","item","number","loginRequest","data","code","errors","token","vip","admin","email","localStorage","setItem","username","success","error","registerRequest","getTomatosRequest","user_report","addReportRequest","getGoodListRequest","length","buyGoodRequest","myStore"],"mappings":"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","sourcesContent":["import { makeAutoObservable } from \"mobx\";\nimport { message } from \"antd\";\n\nimport {\n    login,\n    register,\n    getTomatos,\n    addReport,\n    getGoodList,\n    buyGood\n} from \"../services/index.js\";\n\nclass Mobx {\n    tomato = 0\n    tomatoList = []\n    goodList = []\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    modifyNumber = async(id) => {\n        console.log(id);\n        this.goodList.map(item => {\n            if (item.id === id) {\n                return {\n                    ...item,\n                    number: item.number - 1\n                }\n            } else {\n                return item;\n            }\n        })\n    }\n\n    loginRequest = async(data) => {\n        const {\n            data: {\n                code, errors,\n                data: {\n                    token, tomato,\n                    vip, admin, email\n                }\n            }\n        } = await login(data);\n\n        if (code) {\n            this.tomato = tomato;\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem(\"vip\", vip);\n            localStorage.setItem(\"admin\", admin);\n            localStorage.setItem(\"username\", data.username);\n            localStorage.setItem(\"email\", email);\n            message.success(\"登录成功\");\n            return true;\n        } else {\n            message.error(errors);\n            return false;\n        }\n    }\n\n    registerRequest = async(data) => {\n        const {\n            data: {\n                code, errors,\n                data: {\n                    token, tomato,\n                    vip, admin, email\n                }\n            }\n        } = await register(data);\n\n        if (code) {\n            this.tomato = tomato;\n            localStorage.setItem(\"token\", token);\n            localStorage.setItem(\"vip\", vip);\n            localStorage.setItem(\"admin\", admin);\n            localStorage.setItem(\"username\", data.username);\n            localStorage.setItem(\"email\", email);\n            message.success(\"注册成功自动登录\");\n            return true;\n        } else {\n            message.error(errors);\n            return false;\n        }\n    }\n\n    getTomatosRequest = async() => {\n        const {\n            data: {\n                code, errors,\n                data\n            }\n        } = await getTomatos();\n\n        const { user_report } = data[0];\n\n        if (code) {\n            this.tomatoList = user_report;\n        } else {\n            message.error(errors);\n        }\n    }\n\n    addReportRequest = async(data) => {\n        const {\n            data: {\n                code, errors\n            }\n        } = await addReport(data);\n\n        if (code) {\n            message.success(\"任务记录已上传\");\n        } else {\n            message.error(errors);       \n        }\n    }\n\n    getGoodListRequest = async() => {\n        const {\n            data: {\n                code, errors,\n                data\n            }\n        } = await getGoodList();\n\n        if (code) {\n            this.goodList = data;\n            console.log(this.goodList.length, data)\n        } else {\n            message.error(errors);\n        }\n    }\n\n    buyGoodRequest = async(data) => {\n        const {\n            data: {\n                code, errors\n            }\n        } = await buyGood(data);\n        \n        if (code) {\n            message.success(\"购买成功\");\n        } else {\n            message.error(errors);\n        }\n    }\n}\n\nconst myStore = new Mobx();\nexport default myStore;\n"]},"metadata":{},"sourceType":"module"}