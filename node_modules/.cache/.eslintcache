[{"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/index.js":"1","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/App.js":"2","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/index.js":"3","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Login/index.js":"4","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Onchard/index.js":"5","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/SelfStudent/index.js":"6","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/store/index.js":"7","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/Header/index.js":"8","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/Card/index.js":"9","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/services/index.js":"10","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/utils/request.js":"11","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Manage/index.js":"12","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Records/index.js":"13"},{"size":476,"mtime":1646618918629,"results":"14","hashOfConfig":"15"},{"size":759,"mtime":1647949625116,"results":"16","hashOfConfig":"15"},{"size":244,"mtime":1646642540226,"results":"17","hashOfConfig":"15"},{"size":8040,"mtime":1647354853033,"results":"18","hashOfConfig":"15"},{"size":3263,"mtime":1647959611684,"results":"19","hashOfConfig":"15"},{"size":16160,"mtime":1647921457797,"results":"20","hashOfConfig":"15"},{"size":8751,"mtime":1647962162982,"results":"21","hashOfConfig":"15"},{"size":2055,"mtime":1647949637763,"results":"22","hashOfConfig":"15"},{"size":8502,"mtime":1647357653275,"results":"23","hashOfConfig":"15"},{"size":1363,"mtime":1647937756830,"results":"24","hashOfConfig":"15"},{"size":3442,"mtime":1646988257573,"results":"25","hashOfConfig":"15"},{"size":6568,"mtime":1647355171701,"results":"26","hashOfConfig":"15"},{"size":1814,"mtime":1647952641073,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1g5ykoa",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/index.js",[],[],["79","80"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/App.js",[],[],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/index.js",[],[],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Login/index.js",["81","82"],[],"import React, { useState } from \"react\";\nimport {\n    Form, Input,\n    Button,\n    message,\n} from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport { observer } from \"mobx-react-lite\";\nimport myStore from \"../../store/index\";\nimport \"./index.css\";\n\nconst FormItem = Form.Item;\nconst { Password: InputPassword } = Input;\n\nfunction Login() {\n    const formRef = React.createRef();\n    const [status, setStatus] = useState(true);\n    const navigate = useNavigate();\n\n    const handleRegister = () => {\n        setStatus(!status);\n        formRef.current.resetFields();\n    }\n\n    const handleClickLogin = async(value) => {\n        const result = await myStore.loginRequest(value);\n        formRef.current.resetFields();\n\n        if (result) {\n            navigate(\"/home\");\n        }\n    }\n\n    const handleClickRegister = async(value) => {\n        const {\n            password, password2\n        } = value;\n\n        if (password === password2) {\n            const result = await myStore.registerRequest(value);\n            \n            if (result) {\n                formRef.current.resetFields();\n                navigate(\"/home\");\n            }\n        } else {\n            message.warn(\"密码与确认密码不一致\");\n        }\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"content\">\n                <div className=\"header\">\n                    <div>番茄学习法</div>\n                </div>\n                {status\n                    ? (<Form\n                        name=\"basic\"\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 17 }}\n                        ref={formRef}\n                        onFinish={handleClickLogin}\n                        autoComplete=\"off\"\n                        initialValues={{\n                            \"username\": \"\",\n                            \"password\": \"\",\n                            \"rePassword\": \"\",\n                            \"email\": \"\"\n                        }}\n                    >\n                        <FormItem\n                            label=\"用户名\"\n                            name=\"username\"\n                            className=\"login-username\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!'\n                                    }\n                                ]\n                            }\n                        >\n                            <Input placeholder=\"请输入用户名\"/>\n                        </FormItem>\n                        <FormItem\n                            label=\"密&emsp;码\"\n                            name=\"password\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!'\n                                    }\n                                ]\n                            }\n                        >\n                            <InputPassword  placeholder=\"请输入密码\"/>\n                        </FormItem>\n                        <FormItem\n                            wrapperCol={{ offset: 10, span: 14 }}\n                        >\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                            >\n                                登陆\n                            </Button>\n                        </FormItem>\n                    </Form>)\n                    : (<Form\n                        name=\"basic\"\n                        labelCol={{ span: 6 }}\n                        wrapperCol={{ span: 17 }}\n                        ref={formRef}\n                        onFinish={handleClickRegister}\n                        autoComplete=\"off\"\n                    >\n                        <FormItem\n                            label=\"昵称\"\n                            name=\"name\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!'\n                                    }\n                                ]\n                            }\n                        >\n                            <Input placeholder=\"请输入昵称\" />\n                        </FormItem>\n                        <FormItem\n                            label=\"账号\"\n                            name=\"username\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!'\n                                    }\n                                ]\n                            }\n                        >\n                            <Input placeholder=\"请输入账号\" />\n                        </FormItem>\n                        <FormItem\n                            label=\"密码\"\n                            name=\"password\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!'\n                                    }\n                                ]\n                            }\n                        >\n                            <InputPassword placeholder=\"请输入密码\" />\n                        </FormItem>\n                        <FormItem\n                            label=\"确认密码\"\n                            name=\"password2\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!'\n                                    }\n                                ]\n                            }\n                        >\n                            <InputPassword placeholder=\"请输入密码\" />\n                        </FormItem>\n                        <FormItem\n                            label=\"邮箱\"\n                            name=\"email\"\n                            rules={\n                                [\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!'\n                                    }\n                                ]\n                            }\n                        >\n                            <Input placeholder=\"请输入邮箱\" />\n                        </FormItem>\n                        <FormItem\n                            wrapperCol={{ offset: 10, span: 14 }}\n                        >\n                            <Button\n                                type=\"primary\"\n                                htmlType=\"submit\"\n                            >\n                                注册\n                            </Button>\n                        </FormItem>\n                    </Form>)}\n                <div className=\"footer\">\n                    <a\n                        className=\"register\"\n                        onClick={handleRegister}\n                    >{status ? '注册' : '登陆'}</a>\n                </div>\n                <a\n                    href=\"http://82.156.102.187:8002/admin/login/?next=/admin/\"\n                    className=\"super-man\"\n                    target=\"_blank\"\n                >\n                    超级管理员\n                </a>\n            </div>\n        </div>\n    )\n}\n\nexport default observer(Login);\n",["83","84"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Onchard/index.js",["85","86"],[],"import React, { useEffect } from \"react\";\nimport { Empty, message, Modal } from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router-dom\";\nimport myStore from \"../../store\";\nimport imgUrl from \"../../images/tomato.png\";\nimport \"./index.css\";\nimport { LeftCircleOutlined } from '@ant-design/icons';\n\nconst { confirm } = Modal;\nconst vip = localStorage.getItem(\"vip\");\n\nfunction Onchard() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        myStore.getGoodListRequest()\n    }, [])\n\n    const handleBuy = (id, price, number) => {\n        if (number === 0) {\n            message.warn(\"所购买的商品已售空\");\n        } else {\n            confirm({\n                title: \"番茄果园\",\n                content: \"是否确认购买\",\n                okText: \"确认\",\n                cancelText: \"取消\",\n                onOk() {\n                    if (!vip) {\n                        message.warn(\"你不是 VIP, 无法购买\");\n                    } else {\n                        myStore.buyGoodRequest({\n                            goods: id\n                        }, price);\n                    }\n                }\n            })\n        }\n    }\n\n    const handleReturn = () => {\n        navigate(\"/home\");\n    }\n\n    return (\n        <div className=\"on-content\">\n            <LeftCircleOutlined\n                className=\"on-return\"\n                onClick={handleReturn}\n            />\n            <div className=\"on-header\">\n                番茄果园\n            </div>\n            <div className=\"on-tomato\">\n                <img className=\"on-icon-img\" src={imgUrl} />\n                {myStore.tomato}\n            </div>\n            <div className=\"on-good\">\n                {\n                    myStore.goodList.length === 0\n                        ? <Empty\n                            className=\"on-empty\"\n                            description=\"没有数据\"\n                            image={Empty.PRESENTED_IMAGE_SIMPLE}\n                        />\n                        : myStore.goodList.map(({ id, name, price, number, img }) => {\n                            return (\n                                <div className=\"on-item\" key={id}>\n                                    <div className=\"on-left\">\n                                        <img className=\"on-item-img\" src={img} />\n                                    </div>\n                                    <div className=\"on-right\">\n                                        <div className=\"on-item-name\">{name}</div>\n                                        <div className=\"on-item-number\">{number === 0 ? \"已售空\" : `存量: ${number}`}</div>\n                                        <div className=\"on-item-price\">花费: {price}</div>\n                                        <div\n                                            className=\"on-btn\"\n                                            onClick={() => handleBuy(id, price, number)}\n                                        >购买</div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default observer(Onchard);",["87","88"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/SelfStudent/index.js",["89","90","91"],[],"import { useEffect, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n    Modal, Input,\n    Badge, Popover, message\n} from \"antd\";\nimport myStore from \"../../store\";\nimport \"./index.css\";\nimport {\n    LeftCircleOutlined, EditOutlined,\n    DeleteOutlined, UsergroupDeleteOutlined,\n    LogoutOutlined,\n    CloseCircleOutlined, CheckCircleOutlined\n} from '@ant-design/icons';\nimport imgUrl from \"../../images/tomato.png\";\n\nconst { confirm } = Modal;\nconst vip = localStorage.getItem(\"vip\");\n\nfunction SelfStudent() {\n    const navigate = useNavigate();\n    const [value, setValue] = useState(\"\");\n    const [isVisible, setIsVisible] = useState(false);\n    const [roomName, setRoomName] = useState(\"\");\n    const [groupName, setGroupName] = useState(\"\");\n    const [max, setMax] = useState(0);\n\n    useEffect(() => {\n        myStore.placeSelfRoomRequest();\n        myStore.applyStatusRequest();\n    }, [])\n\n    const handleEnter = async (event) => {\n        const { value } = event.target;\n\n        if (event.keyCode === 13) {\n            await myStore.joinRoomRequest({\n                group: value\n            });\n\n            myStore.applyStatusRequest();\n        } else {\n            setValue(value);\n        }\n    }\n\n    const handleReturn = () => {\n        navigate(\"/home\");\n    }\n\n    const handleOk = () => {\n        setIsVisible(false);\n        myStore.modifyRoomNameRequest({\n            name: roomName\n        }, myStore.room.id);\n    }\n\n    const handleCancel = () => {\n        setIsVisible(false);\n    }\n\n    const handleNameEnter = (event) => {\n        const { value } = event.target;\n\n        if (event.keyCode === 13) {\n            myStore.modifyRoomNameRequest({\n                name: value\n            }, myStore.room.id);\n        } else {\n            setRoomName(value);\n        }\n    }\n\n    const handleDeleteUser = (id) => {\n        confirm({\n            title: \"番茄自习室\",\n            content: \"是否提出该同学\",\n            okText: \"确认\",\n            cancelText: \"取消\",\n            onOk() {\n                myStore.deleteUserRequest({\n                    info: id\n                });\n            }\n        });\n    }\n\n    const handleDeleteGroup = (id) => {\n        confirm({\n            title: \"番茄自习室\",\n            content: \"是否删除自习室\",\n            okText: \"确认\",\n            cancelText: \"取消\",\n            onOk() {\n                myStore.deleteGroupRequest(id);\n            }\n        })\n    }\n\n    const handleQuitGroup = () => {\n        confirm({\n            title: \"番茄自习室\",\n            content: \"是否确认退出自习室\",\n            okText: \"确认\",\n            cancelText: \"取消\",\n            onOk() {\n                myStore.quitGroupRequest();\n            }\n        })\n    }\n\n    const handleCreateRoom = () => {\n        if (max > 0) {\n            myStore.createGroupRequest({\n                name: groupName,\n                max: parseInt(max)\n            })\n        } else {\n            message.warn(\"人数小于 1\");\n        } \n    }\n\n    const handleApplyUser = (id) => {\n        confirm({\n            title: \"番茄自习室\",\n            content: \"是否通过该申请\",\n            okText: \"确认\",\n            cancelText: \"取消\",\n            onOk() {\n                myStore.quitGroupRequest({\n                    info: id\n                });\n            }\n        })\n    }\n\n    const handleCancelApply = () => {\n        confirm({\n            title: \"番茄自习室\",\n            content: \"是否取消该申请\",\n            okText: \"确认\",\n            cancelText: \"取消\",\n            onOk() {\n                myStore.quitGroupRequest();\n            }\n        })\n    }\n\n    return (\n        <div className=\"self-content\">\n            <Modal\n                title=\"番茄学习\"\n                visible={isVisible}\n                okText=\"提交\"\n                cancelText=\"取消\"\n                onOk={handleOk}\n                onCancel={handleCancel}\n            >\n                <div className=\"self-modify\">\n                    <div className=\"self-modify-name\">房间名</div>\n                    <Input\n                        value={roomName}\n                        onKeyDown={event => handleNameEnter(event)}\n                        onChange={event => handleNameEnter(event)}\n                    />\n                </div>\n            </Modal>\n            <div className=\"self-title\">\n                番茄自习室\n            </div>\n            <LeftCircleOutlined\n                className=\"on-return\"\n                onClick={handleReturn}\n            />\n            <div className=\"self-header\">\n                <div className=\"self-join\">\n                    加入自习室\n                </div>\n                <div className=\"self-bar\"></div>\n                <div className=\"self-top\">\n                    <div className=\"self-label\">\n                        输入房间号\n                    </div>\n                    <div className=\"self-search\">\n                        <input\n                            value={value}\n                            className=\"self-search-input\"\n                            onKeyDown={e => handleEnter(e)}\n                            onChange={e => handleEnter(e)}\n                        />\n                    </div>\n                </div>\n            </div>\n            {!myStore.apply\n                ? (\n                    !!vip\n                        ? myStore.listEmpty\n                            ? (<div className=\"self-room\">\n                                <div className=\"self-vip-title\">创建房间</div>\n                                <div className=\"self-bar\"></div>\n                                <div className=\"self-vip-list\">\n                                    <div className=\"self-vip-item\">\n                                        <div className=\"self-vip-label\">自习室名称</div>\n                                        <input onChange={({ target: { value } }) => { setGroupName(value) }} className=\"self-vip-empty\" />\n                                    </div>\n                                    <div className=\"self-vip-item\">\n                                        <div className=\"self-vip-label\">最大人数</div>\n                                        <input onChange={({ target: { value } }) => { setMax(value) }} className=\"self-vip-empty\" />\n                                    </div>\n                                    <div\n                                        className=\"self-vip-btn\"\n                                        onClick={handleCreateRoom}\n                                    >创建</div>\n                                </div>\n                            </div>)\n                            : (<div className=\"self-room\">\n                                <div className=\"self-room-header\">\n                                    <Popover content=\"删除自习室\">\n                                        <UsergroupDeleteOutlined\n                                            className=\"delete-group\"\n                                            onClick={() => handleDeleteGroup(myStore.room.id)}\n                                        />\n                                    </Popover>\n                                    <Popover content=\"编辑自习室\">\n                                        <EditOutlined\n                                            className=\"self-name-edit\"\n                                            onClick={() => setIsVisible(true)}\n                                        />\n                                    </Popover>\n                                    <div className=\"self-room-name\">\n                                        房间名: {myStore.room.name}\n                                    </div>\n                                    <div className=\"self-room-max\">最大人数: {myStore.room.max}</div>\n                                </div>\n                                <div className=\"self-bar\"></div>\n                                <div className=\"self-room-list\">\n                                    {\n                                        myStore.userId === myStore.room.user.id\n                                            ? (\n                                                myStore.member.map(({ id, activate, user: { name, tomato, vip, id: userId } }) => {\n                                                    return <div className=\"self-member\" key={id}>\n                                                        <div className=\"self-member-tomato\">\n                                                            <img className=\"self-member-img\" src={imgUrl} />\n                                                            {tomato}\n                                                        </div>\n                                                        <div className=\"self-member-name\">{name}</div>\n                                                        <div className=\"self-member-vip\">{vip ? \"会员\" : \"非会员\"}{activate}</div>\n                                                        {activate\n                                                            ? (\n                                                                <div className=\"self-badge\">\n                                                                    <Badge color=\"cyan\" />\n                                                                    <div className=\"self-badge-word\">自习中</div>\n                                                                </div>\n                                                            )\n                                                            : (\n                                                                <div className=\"self-badge\">\n                                                                    <Badge color=\"volcano\" />\n                                                                    <div className=\"self-badge-word\">申请</div>\n                                                                </div>\n                                                            )\n                                                        }\n                                                        {myStore.userId !== userId && activate\n                                                            && (\n                                                                <Popover content=\"通过申请\">\n                                                                    <CheckCircleOutlined\n                                                                        className=\"apply-user\"\n                                                                        onClick={() => handleApplyUser(id)}\n                                                                    />\n                                                                </Popover>\n                                                            )\n                \n                                                        }\n                                                        {myStore.userId !== userId\n                                                            && (\n                                                                <Popover content=\"踢出自习室\">\n                                                                    <DeleteOutlined\n                                                                        className=\"delete-user\"\n                                                                        onClick={() => handleDeleteUser(id)}\n                                                                    />\n                                                                </Popover>\n                                                            )\n                                                        }\n                                                    </div>\n                                                })\n                                            )\n                                            : (\n                                                myStore.member.filter(({ activate }) => activate).map(({ id, user: { name, tomato, vip } }) => {\n                                                    return <div className=\"self-member\" key={id}>\n                                                        <div className=\"self-member-tomato\">\n                                                            <img className=\"self-member-img\" src={imgUrl} />\n                                                            {tomato}\n                                                        </div>\n                                                        <div className=\"self-member-name\">{name}</div>\n                                                        <div className=\"self-member-vip\">{vip ? \"会员\" : \"非会员\"}</div>\n                                                    </div>\n                                                })\n                                            )\n                                    }\n                                </div>\n                            </div>)\n                        : myStore.listEmpty\n                            ? (<div className=\"self-member-room\">快加入自习室，学习吧！</div>)\n                            : (<div className=\"self-room\">\n                                <div className=\"self-room-header\">\n                                    <Popover content=\"退出自习室\">\n                                        <LogoutOutlined\n                                            className=\"self-quit\"\n                                            onClick={() => handleQuitGroup()}\n                                        />\n                                    </Popover>\n                                    <div className=\"self-room-name\">\n                                        房间名: {myStore.room.name}\n                                    </div>\n                                    <div className=\"self-room-max\">最大人数: {myStore.room.max}</div>\n                                </div>\n                                <div className=\"self-bar\"></div>\n                                <div className=\"self-room-list\">\n                                    {\n                                        myStore.member.filter(({ activate }) => activate).map(({ id, user: { name, tomato, vip } }) => {\n                                            return <div className=\"self-member\" key={id}>\n                                                <div className=\"self-member-tomato\">\n                                                    <img className=\"self-member-img\" src={imgUrl} />\n                                                    {tomato}\n                                                </div>\n                                                <div className=\"self-member-name\">{name}</div>\n                                                <div className=\"self-member-vip\">{vip ? \"会员\" : \"非会员\"}</div>\n                                            </div>\n                                        })\n                                    }\n                                </div>\n                            </div>)\n                    \n                )\n                : (\n                    <div className=\"self-room\">\n                        <div className=\"self-apply\">\n                            <div className=\"self-apply-name\">{myStore.applyData.group_name}</div>\n                            <div className=\"self-apply-adminname\">管理员: {myStore.applyData.admin_name}</div>\n                            <div className=\"self-apply-status\">{myStore.applyData.activate ? \"通过\" : \"申请中\"}</div>\n                            <Popover content=\"取消申请\">\n                                <CloseCircleOutlined\n                                    className=\"apply-cancel\"\n                                    onClick={handleCancelApply}\n                                />\n                            </Popover>\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default observer(SelfStudent);\n\n",["92","93"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/store/index.js",[],[],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/Header/index.js",["94"],[],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Home/Card/index.js",[],[],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/services/index.js",[],[],["95","96"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/utils/request.js",["97","98","99"],[],"import axios from 'axios'\n\nconst baseURL = \"http://82.156.102.187:8002\";\n\naxios.interceptors.request.use(config => {\n    if (config.url === \"/login/\") {\n       localStorage.clear();\n    } else {\n        const token = `JWT ${localStorage.getItem(\"token\")}`;\n        config.headers.Authorization = token;\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\naxios.interceptors.response.use(response => {\n    return response\n}, error => {\n    return Promise.resolve(error.response)\n})\n\nfunction checkStatus(response) {\n    // loading\n    // 如果http状态码正常，则直接返回数据\n    if (response && (response.status === 304 || response.status === 400 || response.status >= 200 && response.status < 300)) {\n        return response\n        // 如果不需要除了data之外的数据，可以直接 return response.data\n    }\n    // 异常状态下，把错误信息返回去\n    return {\n        status: -404,\n        msg: '网络异常'\n    }\n}\n\nfunction checkCode(res) {\n    // 如果code异常(这里已经包括网络错误，服务器错误，后端抛出的错误)，可以弹出一个错误提示，告诉用户\n    if (res.status === -404) {\n        // alert(res.msg)\n    }\n    if (res.data && (!res.data.success)) {\n        // alert(res.data.error_msg)\n    }\n    return res\n}\n\nexport default {\n    post(url, data) {\n        return axios({\n            method: 'post',\n            baseURL,\n            url,\n            data,\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n                'Content-Type': 'application/json'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    get(url, params) {\n        return axios({\n            method: 'get',\n            baseURL,\n            url,\n            params, // get 请求时带的参数\n            timeout: 10000,\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    patch(url, data) {\n        return axios({\n            method: 'patch',\n            baseURL,\n            url,\n            data,\n            timeout: 10000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res)\n            }\n        )\n    },\n    delete(url, data) {\n        return axios({\n            method: 'delete',\n            baseURL,\n            url,\n            data,\n            timeout: 1000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res);\n            }\n        )\n    },\n    put(url, data) {\n        return axios({\n            method: 'put',\n            baseURL,\n            url,\n            data,\n            timeout: 1000\n        }).then(\n            (response) => {\n                return checkStatus(response)\n            }\n        ).then(\n            (res) => {\n                return checkCode(res);\n            }\n        )\n    }\n}",["100","101"],"/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Manage/index.js",["102"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n    Empty, Modal, Upload,\n    InputNumber, Input, Button\n} from \"antd\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router-dom\";\nimport myStore from \"../../store\";\nimport \"./index.css\";\nimport {\n    LeftCircleOutlined, UploadOutlined\n} from '@ant-design/icons';\n\nfunction Manage() {\n    const navigate = useNavigate();\n    const [status, setStatus] = useState(false);\n    const [id, setId] = useState(0);\n    const [url, setUrl] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [price, setPrice] = useState(0);\n    const [number, setNumber] = useState(0);\n    const [files, setFiles] = useState([]);\n    const [isVisible, setIsVisible] = useState(false);\n\n    useEffect(() => {\n        myStore.getGoodListRequest()\n    }, [])\n\n    const handleModify = (id, img, name, price, number) => {\n        setId(id);\n        setName(name);\n        setPrice(price);\n        setNumber(number);\n        setUrl(img);\n        setStatus(false);\n        setIsVisible(true);\n    }\n\n    const handleReturn = () => {\n        navigate(\"/home\");\n    }\n\n    const handleAdd = () => {\n        setName(\"\");\n        setPrice(0);\n        setNumber(0);\n        setFiles([]);\n        setStatus(true);\n        setIsVisible(true);\n    }\n\n    const handleOk = () => {\n        setName(\"\");\n        setPrice(0);\n        setNumber(0);\n        setFiles([]);\n        setIsVisible(false);\n\n        if (status) {\n            myStore.addComRequest({\n                name,\n                price,\n                number,\n                img: url\n            })\n        } else {\n            myStore.modifyComRequest({\n                name,\n                price,\n                number,\n                img: url\n            }, id)\n        }\n    }\n\n    const handleCancel = () => {\n        setName(\"\");\n        setPrice(0);\n        setNumber(0);\n        setFiles([]);\n        setIsVisible(false);\n    }\n\n    const handleDelete = (id) => {\n        myStore.deleteCom(id);\n    }\n\n    const props = {\n        name: \"file\",\n        action: \"http://82.156.102.187:8002/upload/\",\n        headers: {\n            authorization: `JWT ${localStorage.getItem(\"token\")}`\n        },\n        maxCount: 1,\n        fileList: files,\n        onChange(info) {\n            const {\n                file: {\n                    status, response\n                },\n                fileList\n            } = info;\n\n            setFiles(fileList);\n            if (status === \"done\") {\n                const {\n                    data: { url }\n                } = response;\n\n                setUrl(url);\n            }\n        }\n    }\n\n    return (\n        <div className=\"on-content\">\n            <Modal\n                title=\"番茄学习法\"\n                visible={isVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                cancelText=\"取消\"\n                okText=\"提交\"\n            >\n                <div className=\"man-input\">\n                    <div className=\"man-label\">名字</div>\n                    <Input\n                        className=\"man-input-inner\"\n                        value={name}\n                        onChange={({ target: { value } }) => setName(value)}\n                    />\n                </div>\n                <div className=\"man-input\">\n                    <div className=\"man-label\">花费</div>\n                    <InputNumber\n                        className=\"man-inputnumber-inner\"\n                        min={0}\n                        value={price}\n                        onChange={value => setPrice(value)}\n                    />\n                </div>\n                <div className=\"man-input\">\n                    <div className=\"man-label\">数量</div>\n                    <InputNumber\n                        className=\"man-inputnumber-inner\"\n                        min={0}\n                        value={number}\n                        onChange={value => setNumber(value)}\n                    />\n                </div>\n                <Upload\n                    {...props}\n                    className=\"man-upload\"\n                >\n                    <Button icon={<UploadOutlined />}>Click to Upload</Button>\n                </Upload>\n            </Modal>\n            <LeftCircleOutlined\n                className=\"on-return\"\n                onClick={handleReturn}\n            />\n            <div className=\"on-header\">\n                番茄果园\n            </div>\n            <div className=\"on-good\">\n                {\n                    myStore.goodList.length === 0\n                        ? <Empty\n                            className=\"on-empty\"\n                            description=\"没有数据\"\n                            image={Empty.PRESENTED_IMAGE_SIMPLE}\n                        />\n                        : myStore.goodList.map(({ id, name, price, number, img }) => {\n                            return (\n                                <div className=\"on-item\" key={id}>\n                                    <div className=\"on-left\">\n                                        <img className=\"on-item-img\" src={img} />\n                                    </div>\n                                    <div className=\"on-right\">\n                                        <div className=\"man-item-name\">{name}</div>\n                                        <div className=\"man-item-number\">存量: {number}</div>\n                                        <div className=\"man-item-price\">花费: {price}</div>\n                                        <div\n                                            className=\"on-btn man-btn\"\n                                            onClick={() => handleModify(id, img, name, price, number)}\n                                        >修改</div>\n                                        <div\n                                            className=\"on-btn man-btn\"\n                                            onClick={() => handleDelete(id)}\n                                        >删除</div>\n                                    </div>\n                                </div>\n                            )\n                        })\n                }\n                <div\n                    className=\"man-add\"\n                    onClick={handleAdd}\n                >\n                    <div className=\"add-column\"></div>\n                    <div className=\"add-row\"></div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default observer(Manage);","/Users/wuliangrui/Desktop/库里泡/item/tomato/src/components/Records/index.js",["103"],[],"import { useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Empty } from \"antd\";\nimport myStore from \"../../store\";\nimport { LeftCircleOutlined } from '@ant-design/icons';\nimport imgUrl from \"../../images/tomato.png\";\nimport \"./index.css\";\n\nfunction Records() {\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        myStore.getRecordsRequest();\n    }, [])\n\n    const handleReturn = () => {\n        navigate(\"/home\");\n    }\n\n    return (\n        <div className=\"records\">\n            <LeftCircleOutlined\n                className=\"on-return\"\n                onClick={handleReturn}\n            />\n            <div className=\"records-header\">兑换记录</div>\n            <div className=\"records-list\">\n                {\n                    myStore.records.length === 0\n                        ? <Empty\n                            className=\"empty\"\n                            description=\"没有数据\"\n                            image={Empty.PRESENTED_IMAGE_SIMPLE}\n                        />\n                        : myStore.records.map(({ id, time, goods }) => {\n                            return <div className=\"records-item\" key={id}>\n                                <div className=\"records-name\">{goods.name}</div>\n                                <div className=\"records-price\">\n                                    <img className=\"records-icon-img\" src={imgUrl} />\n                                    {goods.price}\n                                </div>\n                                <div className=\"records-time\">{time.slice(0, 19).replace(\"T\", \" \")}</div>\n                            </div>\n                        })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default observer(Records);\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":202,"column":21,"nodeType":"110","endLine":205,"endColumn":22},{"ruleId":"111","severity":1,"message":"112","line":207,"column":17,"nodeType":"110","messageId":"113","endLine":211,"endColumn":18,"fix":"114"},{"ruleId":"104","replacedBy":"115"},{"ruleId":"106","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":56,"column":17,"nodeType":"110","endLine":56,"endColumn":61},{"ruleId":"117","severity":1,"message":"118","line":71,"column":41,"nodeType":"110","endLine":71,"endColumn":82},{"ruleId":"104","replacedBy":"119"},{"ruleId":"106","replacedBy":"120"},{"ruleId":"117","severity":1,"message":"118","line":244,"column":61,"nodeType":"110","endLine":244,"endColumn":109},{"ruleId":"117","severity":1,"message":"118","line":291,"column":61,"nodeType":"110","endLine":291,"endColumn":109},{"ruleId":"117","severity":1,"message":"118","line":323,"column":53,"nodeType":"110","endLine":323,"endColumn":101},{"ruleId":"104","replacedBy":"121"},{"ruleId":"106","replacedBy":"122"},{"ruleId":"117","severity":1,"message":"118","line":38,"column":17,"nodeType":"110","endLine":38,"endColumn":61},{"ruleId":"104","replacedBy":"123"},{"ruleId":"106","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":26,"column":73,"nodeType":"127","messageId":"128","endLine":26,"endColumn":75},{"ruleId":"125","severity":1,"message":"126","line":26,"column":99,"nodeType":"127","messageId":"128","endLine":26,"endColumn":101},{"ruleId":"129","severity":1,"message":"130","line":48,"column":1,"nodeType":"131","endLine":141,"endColumn":2},{"ruleId":"104","replacedBy":"132"},{"ruleId":"106","replacedBy":"133"},{"ruleId":"117","severity":1,"message":"118","line":177,"column":41,"nodeType":"110","endLine":177,"endColumn":82},{"ruleId":"117","severity":1,"message":"118","line":40,"column":37,"nodeType":"110","endLine":40,"endColumn":86},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"136","text":"137"},["134"],["135"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["134"],["135"],["134"],["135"],["134"],["135"],"no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["134"],["135"],"no-global-assign","no-unsafe-negation",[7737,7737]," rel=\"noreferrer\""]